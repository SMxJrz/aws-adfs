# This workflow will install Python dependencies and run tests with several versions of Python on MacOS, Ubuntu and Windows
# When successful, packages are published to test.pypi.org and pypi.org (releases only)
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Build

env:
  PYTHON_VERSION: 3.9
  POETRY_VERSION: 1.1.10

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  test-and-package-wheel-archive:
    name: Build wheel (${{ matrix.python-version }} on ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        python-version: [3.5, 3.6, 3.7, 3.8, 3.9, 3.10-dev]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install libkrb5-dev
        run: sudo apt-get -y install libkrb5-dev
        if: matrix.os == 'ubuntu-latest'

      - name: Install poetry ${{ env.POETRY_VERSION }}
        run: |
          pip install poetry==${{ env.POETRY_VERSION }}
          poetry config experimental.new-installer false # New installer does not support python 3.10 yet, see https://github.com/python-poetry/poetry/issues/4210

      - name: Install aws-adfs and its dependencies
        run: |
          poetry install

      - name: Test with pytest
        run: |
          poetry run pytest

      - name: Build a wheel archive
        run: |
          poetry build --format wheel

      - name: Upload wheel archive
        uses: actions/upload-artifact@v2
        with:
          path: |
            dist

  package-source-archive:
    name: Package source archive
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install poetry ${{ env.POETRY_VERSION }}
        run: |
          pip install poetry==${{ env.POETRY_VERSION }}

      - name: Build a source archive
        run: |
          poetry build --format sdist

      - name: Upload source archive
        uses: actions/upload-artifact@v2
        with:
          path: |
            dist

  publish:
    name: Publish source and wheel archives
    needs:
      - test-and-package-wheel-archive
      - package-source-archive
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags') # Only publish tagged releases
    steps:
      - uses: actions/checkout@v2

      - name: Download all workflow source and wheel archives
        uses: actions/download-artifact@v2
        with:
          path: dist

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install poetry ${{ env.POETRY_VERSION }}
        run: |
          pip install poetry==${{ env.POETRY_VERSION }}

      - name: Publish package to TestPyPI
        env:
          POETRY_PYPI_TOKEN_TESTPYPI: ${{ secrets.test_pypi_password }}
        run: |
          poetry config repositories.testpypi https://test.pypi.org/legacy/
          poetry publish --repository testpypi

      - name: Check Version
        id: check-version
        run: |
          [[ "$(poetry version --short)" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]] \
            || echo ::set-output name=prerelease::true

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "dist/*"
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          prerelease: steps.check-version.outputs.prerelease == 'true'

      - name: Publish to PyPI
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.pypi_password }}
        run: poetry publish
        if: steps.check-version.outputs.prerelease != 'true' # Only publish final releases to PyPI
